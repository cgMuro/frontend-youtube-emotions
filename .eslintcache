[{"/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/index.js":"1","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/App.js":"2","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/reportWebVitals.js":"3","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/components/Base.js":"4","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/components/Home.js":"5","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/components/Info.js":"6","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/components/Analysis.js":"7","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/context/VideoState.js":"8","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/context/ApiState.js":"9","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/context/ErrorState.js":"10","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/components/Loading.js":"11"},{"size":500,"mtime":1609166456490,"results":"12","hashOfConfig":"13"},{"size":473,"mtime":1609335931494,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1609166456493,"results":"15","hashOfConfig":"13"},{"size":675,"mtime":1609177183106,"results":"16","hashOfConfig":"13"},{"size":4095,"mtime":1609525742088,"results":"17","hashOfConfig":"13"},{"size":1908,"mtime":1609176730799,"results":"18","hashOfConfig":"13"},{"size":6729,"mtime":1609527546980,"results":"19","hashOfConfig":"13"},{"size":343,"mtime":1609175175643,"results":"20","hashOfConfig":"13"},{"size":2099,"mtime":1609341083789,"results":"21","hashOfConfig":"13"},{"size":632,"mtime":1609267194164,"results":"22","hashOfConfig":"13"},{"size":211,"mtime":1609268139079,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"pgeizf",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/index.js",[],["51","52"],"/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/App.js",[],"/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/reportWebVitals.js",[],"/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/components/Base.js",[],"/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/components/Home.js",["53"],"import React, { useContext, useState } from 'react';\nimport { Container, Form, Input, FormGroup, Button, Alert, Label } from 'reactstrap';\nimport { ApiContext } from '../context/ApiState';\nimport { ErrorContext } from '../context/ErrorState';\nimport { VideoContext } from '../context/VideoState';\nimport { useHistory } from 'react-router-dom';\n\nimport Loading from './Loading';\n\nexport default function Home() {\n\n    const history = useHistory();\n\n    const { videoURL, setVideoURL } = useContext(VideoContext);\n    const { predictions, getPredictions, loading } = useContext(ApiContext);\n    const { error } = useContext(ErrorContext);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const res = await getPredictions(videoURL, selectNumberComments, selectOrderComments);\n\n        if (res) {\n            history.push('/predictions');\n        }\n    }\n\n    // Alert block functions\n    const [visible, setVisible] = useState(true);\n    const onDismiss = () => setVisible(false);\n    //\n\n    const [selectNumberComments, setSelectNumberComments] = useState(20);\n    const [selectOrderComments, setSelectOrderComments] = useState('relevance');\n\n    return (\n        <>\n            {\n                loading\n                    ?\n                    <Loading />\n                    :\n                    <Container className=\"d-flex align-items-center justify-content-center flex-column\" id=\"search-container\">\n                        {\n                            error.msg !== null\n                                ?\n                                <Alert color=\"danger\" isOpen={visible} toggle={onDismiss}>\n                                    {error.msg}\n                                </Alert>\n                                : null\n                        }\n                        <h3 className=\"mb-4\">Analyze Comments</h3>\n                        <Form id=\"search-form\" onSubmit={(e) => handleSubmit(e)} className=\"mt-3\">\n                            <FormGroup>\n                                <Label for=\"videoURL-input\"><b>Video URL</b></Label>\n                                <Input\n                                    id=\"videoURL-input\"\n                                    type=\"text\"\n                                    value={videoURL}\n                                    onChange={(e) => setVideoURL(e.target.value)}\n                                    placeholder=\"Paste the video URL\"\n                                    required\n                                />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"select-comments-number\"><b>Choose number of comments to analyze</b></Label>\n                                <Input type=\"select\" name=\"select\" id=\"select-comments-number\" value={selectNumberComments} onChange={(e) => setSelectNumberComments(e.target.value)}>\n                                    <option value=\"20\">20</option>\n                                    <option value=\"40\">40</option>\n                                    <option value=\"60\">60</option>\n                                    <option value=\"80\">80</option>\n                                    <option value=\"100\">100</option>\n                                </Input>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"select-comments-number\"><b>Choose order of comments to analyze</b></Label>\n                                <Input type=\"select\" name=\"select\" id=\"select-comments-number\" value={selectOrderComments} onChange={(e) => setSelectOrderComments(e.target.value)}>\n                                    <option value=\"relevance\">relevance</option>\n                                    <option value=\"time\">time</option>\n                                </Input>\n                            </FormGroup>\n                            <Button block outline color=\"dark\" className=\"text-center\">Analyze Video</Button>\n                        </Form>\n\n                    </Container >\n            }\n        </>\n    )\n}\n","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/components/Info.js",[],"/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/components/Analysis.js",["54","55","56","57","58"],"import React, { useState, useContext, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom';\nimport { Container, Col, Row, Collapse } from 'reactstrap'\nimport { ApiContext } from '../context/ApiState';\nimport { VideoContext } from '../context/VideoState';\n\nexport default function Analysis() {\n\n    \n    const history = useHistory();\n\n    const { videoURL } = useContext(VideoContext)\n    const { predictions } = useContext(ApiContext)\n    \n    useEffect(() => {\n        console.log(videoURL)\n        if (videoURL === '' ) {\n            history.push('/');\n        }\n    }, [])\n\n    const [isOpenPositive, setIsOpenPositive] = useState(false);\n    const [isOpenNegative, setIsOpenNegative] = useState(false);\n    const [isOpenNeutral, setIsOpenNeutral] = useState(false);\n\n\n    return (\n        <Container className=\"d-flex align-items-center justify-content-center flex-column\" id=\"analysis-container\">\n            <Row>\n                <Col className=\"p-0\">\n                    <iframe width=\"560\" height=\"315\" src={`https://www.youtube.com/embed/${videoURL.split(/(v=)/g)[2]}`} frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n                </Col>\n                <Col className=\"p-0\">\n\n                    <Container fluid className=\"d-flex flex-column\">\n                        <Container fluid className=\"toggle-container p-0\">\n                            <Container fluid onClick={() => {\n                                setIsOpenPositive(prevState => !prevState);\n                                setIsOpenNegative(false);\n                                setIsOpenNeutral(false);\n                            }}\n                                className=\"d-flex flex-row align-items-center\"\n                            >\n                                <p className=\"mb-0\">Positive</p>\n                                <i className={`ml-auto fa fa-arrow-down ${isOpenPositive ? 'rotate-arrow-collapse' : null}`}></i>\n                            </Container>\n                            <Collapse isOpen={isOpenPositive}>\n                                <Container className=\"comments-container my-3\">\n                                    {\n                                        predictions.data.map(block => {\n                                            if (block.prediction === 'positive') {\n                                                return (\n                                                    <div>\n                                                        <p><a href={block.author_channel_url}><b>{block.author}</b></a></p>\n                                                        <p>{block.comment}</p>\n                                                    </div>\n                                                )\n                                            }\n                                        })\n                                    }\n                                </Container>\n                            </Collapse>\n                        </Container>\n\n                        <Container fluid className=\"toggle-container p-0\">\n                            <Container fluid\n                                onClick={() => {\n                                    setIsOpenPositive(false);\n                                    setIsOpenNegative(prevState => !prevState);\n                                    setIsOpenNeutral(false);\n                                }}\n                                className=\"d-flex flex-row align-items-center\"\n                            >\n                                <p className=\"mb-0\">Negative</p>\n                                <i className={`ml-auto fa fa-arrow-down ${isOpenNegative ? 'rotate-arrow-collapse' : null}`}></i>\n                            </Container>\n                            <Collapse isOpen={isOpenNegative}>\n                                <Container className=\"comments-container my-3\">\n                                    {\n                                        predictions.data.map(block => {\n                                            if (block.prediction === 'negative') {\n                                                return (\n                                                    <div>\n                                                        <p><a href={block.author_channel_url}><b>{block.author}</b></a></p>\n                                                        <p>{block.comment}</p>\n                                                    </div>\n                                                )\n                                            }\n                                        })\n                                    }\n                                </Container>\n                            </Collapse>\n                        </Container>\n\n                        <Container fluid className=\"toggle-container p-0\">\n                            <Container fluid\n                                onClick={() => {\n                                    setIsOpenPositive(false);\n                                    setIsOpenNegative(false);\n                                    setIsOpenNeutral(prevState => !prevState);\n                                }}\n                                className=\"d-flex flex-row align-items-center\"\n                            >\n                                <p className=\"mb-0\">Neutral/Other</p>\n                                <i className={`ml-auto fa fa-arrow-down ${isOpenNeutral ? 'rotate-arrow-collapse' : null}`}></i>\n                            </Container>\n                            <Collapse isOpen={isOpenNeutral}>\n                                <Container className=\"comments-container my-3\">\n                                    {\n                                        predictions.data.map(block => {\n                                            if (block.prediction === 'neutral/other') {\n                                                return (\n                                                    <div>\n                                                        <p><a href={block.author_channel_url}><b>{block.author}</b></a></p>\n                                                        <p>{block.comment}</p>\n                                                    </div>\n                                                )\n                                            }\n                                        })\n                                    }\n                                </Container>\n                            </Collapse>\n                        </Container>\n                    </Container>\n\n                </Col>\n            </Row>\n\n\n\n        </Container>\n    )\n}\n","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/context/VideoState.js",[],"/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/context/ApiState.js",["59"],"import React, { createContext, useState, useContext } from 'react';\nimport axios from 'axios';\nimport { ErrorContext } from './ErrorState';\n\nexport const ApiContext = createContext()\n\nexport function ApiProvider(props) {\n\n    const [predictions, setPredictions] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const { getError, clearError, error } = useContext(ErrorContext);\n\n    // Get predictions\n    // GET https://app-youtube-sentiments.herokuapp.com/\n    const getPredictions = async(videoURL, numberComments=20, order='relevance') => {\n        try {\n            // Set the page to loading\n            setLoading(() => true);\n\n            console.log('Analyzing...');\n\n            // Parse URL\n            let id = videoURL.split(/(v=)/g)[2];\n\n            // Make request to the API\n            const result = await axios.post(`https://cors-anywhere.herokuapp.com/https://app-youtube-sentiments.herokuapp.com/api/comments/${id}?maxResults=${numberComments}&order=${order}`);\n\n            // Check for errors\n            if (result.data.success) {\n                // Set predictions\n                setPredictions(() => result.data);\n\n                clearError();\n\n                // Set the page to not loading\n                setLoading(() => false);\n\n                console.log('Done.');\n\n                return true;\n            } else {\n                getError(result.data['messagge'], result.data.status);\n\n                // Set the page to not loading\n                setLoading(() => false);\n\n                console.log('Done.');\n                return false;\n\n            }\n        } catch (error) {\n            // Set the page to not loading\n            setLoading(() => false);\n\n            // Set error\n            getError(\"Something went wrong\", 500);\n\n            // Return error in the console\n            console.log('Something went wrong...');\n            return false;\n        }\n    }\n\n\n    return (\n        <ApiContext.Provider value={{ predictions, loading, getPredictions }}>\n            {props.children}\n        </ApiContext.Provider>\n    )\n}\n","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/context/ErrorState.js",[],"/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/components/Loading.js",[],["60","61"],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":15,"column":13,"nodeType":"68","messageId":"69","endLine":15,"endColumn":24},{"ruleId":"70","severity":1,"message":"71","line":20,"column":8,"nodeType":"72","endLine":20,"endColumn":10,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":31,"column":21,"nodeType":"76","endLine":31,"endColumn":251},{"ruleId":"77","severity":1,"message":"78","line":50,"column":68,"nodeType":"79","messageId":"80","endLine":50,"endColumn":70},{"ruleId":"77","severity":1,"message":"78","line":80,"column":68,"nodeType":"79","messageId":"80","endLine":80,"endColumn":70},{"ruleId":"77","severity":1,"message":"78","line":110,"column":68,"nodeType":"79","messageId":"80","endLine":110,"endColumn":70},{"ruleId":"66","severity":1,"message":"81","line":11,"column":35,"nodeType":"68","messageId":"69","endLine":11,"endColumn":40},{"ruleId":"62","replacedBy":"82"},{"ruleId":"64","replacedBy":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'predictions' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'videoURL'. Either include them or remove the dependency array.","ArrayExpression",["86"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'error' is assigned a value but never used.",["84"],["85"],"no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},"Update the dependencies array to be: [history, videoURL]",{"range":"89","text":"90"},[590,592],"[history, videoURL]"]