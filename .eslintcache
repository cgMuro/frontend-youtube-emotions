[{"/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/index.js":"1","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/App.js":"2","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/reportWebVitals.js":"3","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/components/Base.js":"4","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/components/Home.js":"5","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/components/Info.js":"6","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/components/Analysis.js":"7","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/context/VideoState.js":"8","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/context/ApiState.js":"9","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/context/ErrorState.js":"10","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/components/Loading.js":"11"},{"size":500,"mtime":1609166456490,"results":"12","hashOfConfig":"13"},{"size":473,"mtime":1609335931494,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1609166456493,"results":"15","hashOfConfig":"13"},{"size":690,"mtime":1610123656873,"results":"16","hashOfConfig":"13"},{"size":3833,"mtime":1610043355324,"results":"17","hashOfConfig":"13"},{"size":1307,"mtime":1610043509811,"results":"18","hashOfConfig":"19"},{"size":18921,"mtime":1612704720079,"results":"20","hashOfConfig":"13"},{"size":343,"mtime":1609175175643,"results":"21","hashOfConfig":"13"},{"size":2067,"mtime":1612700548261,"results":"22","hashOfConfig":"13"},{"size":632,"mtime":1609267194164,"results":"23","hashOfConfig":"13"},{"size":269,"mtime":1610125110687,"results":"24","hashOfConfig":"13"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"t1g6bc",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"pgeizf",{"filePath":"38","messages":"39","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"27"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"27"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/index.js",[],["50","51"],"/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/App.js",[],"/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/reportWebVitals.js",[],"/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/components/Base.js",[],"/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/components/Home.js",[],"/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/components/Info.js",["52"],"/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/components/Analysis.js",["53","54","55","56","57","58","59","60","61","62","63","64"],"import React, { useState, useContext, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom';\nimport { Container, Col, Row, Collapse } from 'reactstrap'\nimport { ApiContext } from '../context/ApiState';\nimport { VideoContext } from '../context/VideoState';\nimport Loading from './Loading';\n\nexport default function Analysis() {\n\n\n    const history = useHistory();\n\n    const { videoURL, setVideoURL } = useContext(VideoContext);\n    const { predictions, getPredictions, loading } = useContext(ApiContext);\n\n    const fetchPredictions = async () => {\n        const id = history.location.pathname.split('/')[2];\n        // Reset videoURL because it's lost when reload\n        setVideoURL(`https://www.youtube.com/watch?v=${id}`);\n        const nComments = history.location.search.split('&')[0].split('=')[1];\n        const orderComments = history.location.search.split('&')[1].split('=')[1];\n\n        const res = await getPredictions(id, nComments, orderComments);\n        return res;\n    }\n\n    const [isOpenPositive, setIsOpenPositive] = useState(false);\n    const [isOpenNegative, setIsOpenNegative] = useState(false);\n    const [isOpenNeutral, setIsOpenNeutral] = useState(false);\n    const [isOpenFeedback, setIsOpenFeedback] = useState(false);\n    const [isOpenSadness, setIsOpenSadness] = useState(false);\n\n    const [counter, setCounter] = useState({\n        positive: 0,\n        negative: 0,\n        neutral: 0,\n        feedback: 0,\n        sadness: 0,\n    })\n\n    // Count the number of positive, negative and neutral comments\n    const counterFunction = () => {\n        predictions.data.map(block => {\n            if (block.prediction === 'positive') {\n                setCounter(prevState => ({\n                    ...prevState,\n                    positive: prevState.positive + 1\n                }))\n            } else if (block.prediction === 'negative') {\n                setCounter(prevState => ({\n                    ...prevState,\n                    negative: prevState.negative + 1\n                }))\n            } else if (block.prediction === 'neutral/other') {\n                setCounter(prevState => ({\n                    ...prevState,\n                    neutral: prevState.neutral + 1\n                }))\n            } else if (block.prediction === 'constructive feedback/idea') {\n                setCounter(prevState => ({\n                    ...prevState,\n                    feedback: prevState.feedback + 1\n                }))\n            } else if (block.prediction === 'sadness') {\n                setCounter(prevState => ({\n                    ...prevState,\n                    sadness: prevState.sadness + 1\n                }))\n            }\n        })\n    }\n    // Update counter when predictions come\n    useEffect(() => {\n        setCounter({ positive: 0, negative: 0, neutral: 0, feedback: 0, sadness: 0 });\n        counterFunction();\n    }, [predictions])\n\n    useEffect(async () => {\n        const res = await fetchPredictions();\n        // Return to home is something went wrong\n        if (!res) {\n            history.push('/');\n        }\n    }, [])\n\n\n    return (\n        <>\n            {\n                loading\n                    ?\n                    <Loading />\n                    :\n                    <Container className=\"d-flex align-items-center justify-content-center flex-column\" id=\"analysis-container\">\n                        <Container fluid className=\"d-flex justify-content-center mt-5 pt-5\">\n                            <iframe title=\"youtube-video\" width=\"560\" height=\"315\" src={`https://www.youtube.com/embed/${videoURL.split(/(v=)/g)[2]}`} frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n                        </Container>\n\n                        <Container fluid className=\"d-flex flex-column px-md-5 m-5\">\n                            {/* POSITIVE */}\n                            <Container fluid className=\"toggle-container p-0\">\n                                <Container fluid onClick={() => {\n                                    setIsOpenPositive(prevState => !prevState);\n                                    setIsOpenNegative(false);\n                                    setIsOpenNeutral(false);\n                                    setIsOpenFeedback(false);\n                                    setIsOpenSadness(false);\n                                }}\n                                    className=\"d-flex flex-row align-items-center pl-3\"\n                                >\n                                    <div className=\"counter-container\" style={{ backgroundColor: 'rgba(0, 255, 0, 0.7)' }}>{counter.positive}</div><p className=\"mb-0\"><span className=\"mr-2\">ðŸ˜€</span>Positive (joy/happiness/amusement/love)</p>\n                                    <i className={`ml-auto fa fa-arrow-down ${isOpenPositive ? 'rotate-arrow-collapse' : null}`}></i>\n                                </Container>\n                                <Collapse isOpen={isOpenPositive}>\n                                    <Container className=\"comments-container mb-3\">\n                                        {\n                                            predictions.data.map(block => {\n                                                if (block.prediction === 'positive') {\n                                                    return (\n                                                        <Row className=\"my-3\">\n                                                            <Col md={1}>\n                                                                <img\n                                                                    className=\"img-fluid avatar\"\n                                                                    src={block.author_profile_pic_url} \n                                                                    alt={`${block.author}-profile_pic`}\n                                                                />\n                                                            </Col>\n                                                            <Col>\n                                                                <p><a href={block.author_channel_url} target=\"_blank\" rel=\"noreferrer\"><b>{block.author}</b></a></p>\n                                                                <p style={{ cursor: 'text' }}>{block.comment}</p>\n                                                            </Col>\n                                                        </Row>\n                                                    )\n                                                }\n                                            })\n                                        }\n                                    </Container>\n                                </Collapse>\n                            </Container>\n\n                            {/* NEGATIVE */}\n                            <Container fluid className=\"toggle-container p-0\">\n                                <Container fluid\n                                    onClick={() => {\n                                        setIsOpenPositive(false);\n                                        setIsOpenNegative(prevState => !prevState);\n                                        setIsOpenNeutral(false);\n                                        setIsOpenFeedback(false);\n                                        setIsOpenSadness(false);\n                                    }}\n                                    className=\"d-flex flex-row align-items-center pl-3\"\n                                >\n                                    <div className=\"counter-container\" style={{ backgroundColor: 'rgba(255, 0, 0, 0.7)' }}>{counter.negative}</div><p className=\"mb-0\"><span className=\"mr-2\">ðŸ¤¬</span>Negative (anger/hate/disgust)</p>\n                                    <i className={`ml-auto fa fa-arrow-down ${isOpenNegative ? 'rotate-arrow-collapse' : null}`}></i>\n                                </Container>\n                                <Collapse isOpen={isOpenNegative}>\n                                    <Container className=\"comments-container mb-3\">\n                                        {\n                                            predictions.data.map(block => {\n                                                if (block.prediction === 'negative') {\n                                                    return (\n                                                        <Row className=\"my-3\">\n                                                            <Col md={1}>\n                                                                <img\n                                                                    className=\"img-fluid avatar\"\n                                                                    src={block.author_profile_pic_url} \n                                                                    alt={`${block.author}-profile_pic`}\n                                                                />\n                                                            </Col>\n                                                            <Col>\n                                                                <p><a href={block.author_channel_url} target=\"_blank\" rel=\"noreferrer\"><b>{block.author}</b></a></p>\n                                                                <p>{block.comment}</p>\n                                                            </Col>\n                                                        </Row>\n                                                    )\n                                                }\n                                            })\n                                        }\n                                    </Container>\n                                </Collapse>\n                            </Container>\n\n                            {/* NEUTRAL/OTHER */}\n                            <Container fluid className=\"toggle-container p-0\">\n                                <Container fluid\n                                    onClick={() => {\n                                        setIsOpenPositive(false);\n                                        setIsOpenNegative(false);\n                                        setIsOpenNeutral(prevState => !prevState);\n                                        setIsOpenFeedback(false);\n                                        setIsOpenSadness(false);\n                                    }}\n                                    className=\"d-flex flex-row align-items-center pl-3\"\n                                >\n                                    <div className=\"counter-container\" style={{ backgroundColor: 'rgba(169, 169, 169, 0.7)' }}>{counter.neutral}</div><p className=\"mb-0\"><span className=\"mr-2\">ðŸ˜¶</span>Neutral/Other</p>\n                                    <i className={`ml-auto fa fa-arrow-down ${isOpenNeutral ? 'rotate-arrow-collapse' : null}`}></i>\n                                </Container>\n                                <Collapse isOpen={isOpenNeutral}>\n                                    <Container className=\"comments-container mb-3\">\n                                        {\n                                            predictions.data.map(block => {\n                                                if (block.prediction === 'neutral/other') {\n                                                    return (\n                                                        <Row className=\"my-3\">\n                                                            <Col md={1}>\n                                                                <img\n                                                                    className=\"img-fluid avatar\"\n                                                                    src={block.author_profile_pic_url} \n                                                                    alt={`${block.author}-profile_pic`}\n                                                                />\n                                                            </Col>\n                                                            <Col>\n                                                                <p><a href={block.author_channel_url} target=\"_blank\"><b>{block.author}</b></a></p>\n                                                                <p>{block.comment}</p>\n                                                            </Col>\n                                                        </Row>\n                                                    )\n                                                }\n                                            })\n                                        }\n                                    </Container>\n                                </Collapse>\n                            </Container>\n\n                            {/* CONSTRUCTIVE FEEDBACK/IDEA */}\n                            <Container fluid className=\"toggle-container p-0\">\n                                <Container fluid\n                                    onClick={() => {\n                                        setIsOpenPositive(false);\n                                        setIsOpenNegative(false);\n                                        setIsOpenNeutral(false);\n                                        setIsOpenFeedback(prevState => !prevState);\n                                        setIsOpenSadness(false);\n                                    }}\n                                    className=\"d-flex flex-row align-items-center pl-3\"\n                                >\n                                    <div className=\"counter-container\" style={{ backgroundColor: 'rgba(242, 156, 43, 0.7)' }}>{counter.feedback}</div><p className=\"mb-0\"><span className=\"mr-2\">ðŸ’¡</span>Constructive Feedback/Idea</p>\n                                    <i className={`ml-auto fa fa-arrow-down ${isOpenFeedback ? 'rotate-arrow-collapse' : null}`}></i>\n                                </Container>\n                                <Collapse isOpen={isOpenFeedback}>\n                                    <Container className=\"comments-container mb-3\">\n                                        {\n                                            predictions.data.map(block => {\n                                                if (block.prediction === 'constructive feedback/idea') {\n                                                    return (\n                                                        <Row className=\"my-3\">\n                                                            <Col md={1}>\n                                                                <img\n                                                                    className=\"img-fluid avatar\"\n                                                                    src={block.author_profile_pic_url} \n                                                                    alt={`${block.author}-profile_pic`}\n                                                                />\n                                                            </Col>\n                                                            <Col>\n                                                                <p><a href={block.author_channel_url} target=\"_blank\"><b>{block.author}</b></a></p>\n                                                                <p>{block.comment}</p>\n                                                            </Col>\n                                                        </Row>\n                                                    )\n                                                }\n                                            })\n                                        }\n                                    </Container>\n                                </Collapse>\n                            </Container>\n\n                            {/* SADNESS */}\n                            <Container fluid className=\"toggle-container p-0\">\n                                <Container fluid\n                                    onClick={() => {\n                                        setIsOpenPositive(false);\n                                        setIsOpenNegative(false);\n                                        setIsOpenNeutral(false);\n                                        setIsOpenFeedback(false);\n                                        setIsOpenSadness(prevState => !prevState);\n                                    }}\n                                    className=\"d-flex flex-row align-items-center pl-3\"\n                                >\n                                    <div className=\"counter-container\" style={{ backgroundColor: 'rgba(51, 51, 255, 0.7)' }}>{counter.sadness}</div><p className=\"mb-0\"><span className=\"mr-2\">ðŸ˜­</span>Sadness</p>\n                                    <i className={`ml-auto fa fa-arrow-down ${isOpenSadness ? 'rotate-arrow-collapse' : null}`}></i>\n                                </Container>\n                                <Collapse isOpen={isOpenSadness}>\n                                    <Container className=\"comments-container mb-3\">\n                                        {\n                                            predictions.data.map(block => {\n                                                if (block.prediction === 'sadness') {\n                                                    return (\n                                                        <Row className=\"my-3\">\n                                                            <Col md={1}>\n                                                                <img\n                                                                    className=\"img-fluid avatar\"\n                                                                    src={block.author_profile_pic_url} \n                                                                    alt={`${block.author}-profile_pic`}\n                                                                />\n                                                            </Col>\n                                                            <Col>\n                                                                <p><a href={block.author_channel_url} target=\"_blank\"><b>{block.author}</b></a></p>\n                                                                <p>{block.comment}</p>\n                                                            </Col>\n                                                        </Row>\n                                                    )\n                                                }\n                                            })\n                                        }\n                                    </Container>\n                                </Collapse>\n                            </Container>\n\n                        </Container>\n\n                    </Container>\n            }\n        </>\n    )\n}\n","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/context/VideoState.js",[],"/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/context/ApiState.js",["65"],"import React, { createContext, useState, useContext } from 'react';\nimport axios from 'axios';\nimport { ErrorContext } from './ErrorState';\n\nexport const ApiContext = createContext()\n\nexport function ApiProvider(props) {\n\n    const [predictions, setPredictions] = useState({\n        data: []\n    });\n    const [loading, setLoading] = useState(false);\n    const { getError, clearError, error } = useContext(ErrorContext);\n\n    // Get predictions\n    // GET https://app-youtube-sentiments.herokuapp.com/   https://cors-anywhere.herokuapp.com/\n    const getPredictions = async(videoURL, numberComments=20, order='relevance') => {\n        try {\n            // Set the page to loading\n            setLoading(() => true);\n\n            console.log('Analyzing...');\n\n            // Make request to the API\n            const result = await axios.post(`https://app-youtube-sentiments.herokuapp.com/api/comments/${videoURL}?maxResults=${numberComments}&order=${order}`);\n\n            // Check for errors\n            if (result.data.success) {\n                // Set predictions\n                setPredictions(() => result.data);\n\n                clearError();\n\n                // Set the page to not loading\n                setLoading(() => false);\n\n                console.log('Done.');\n\n                return true;\n            } else {\n                getError(result.data['messagge'], result.data.status);\n\n                // Set the page to not loading\n                setLoading(() => false);\n\n                console.log('Done.');\n                return false;\n\n            }\n        } catch (error) {\n            // Set the page to not loading\n            setLoading(() => false);\n\n            // Set error\n            getError(\"Something went wrong\", 500);\n\n            // Return error in the console\n            console.log('Something went wrong...');\n            return false;\n        }\n    }\n\n\n    return (\n        <ApiContext.Provider value={{ predictions, loading, getPredictions, setLoading }}>\n            {props.children}\n        </ApiContext.Provider>\n    )\n}\n","/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/context/ErrorState.js",[],"/Users/gioele/Desktop/Web Dev/Frontend/mine/youtube-emotions/src/components/Loading.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":2,"column":25,"nodeType":"72","messageId":"73","endLine":2,"endColumn":36},{"ruleId":"74","severity":1,"message":"75","line":43,"column":36,"nodeType":"76","messageId":"77","endLine":43,"endColumn":38},{"ruleId":"78","severity":1,"message":"79","line":76,"column":8,"nodeType":"80","endLine":76,"endColumn":21,"suggestions":"81"},{"ruleId":"78","severity":1,"message":"82","line":78,"column":15,"nodeType":"76","endLine":84,"endColumn":6},{"ruleId":"78","severity":1,"message":"83","line":84,"column":8,"nodeType":"80","endLine":84,"endColumn":10,"suggestions":"84"},{"ruleId":"74","severity":1,"message":"85","line":117,"column":72,"nodeType":"76","messageId":"86","endLine":117,"endColumn":74},{"ruleId":"74","severity":1,"message":"85","line":159,"column":72,"nodeType":"76","messageId":"86","endLine":159,"endColumn":74},{"ruleId":"74","severity":1,"message":"85","line":201,"column":72,"nodeType":"76","messageId":"86","endLine":201,"endColumn":74},{"ruleId":"87","severity":1,"message":"88","line":213,"column":103,"nodeType":"89","endLine":213,"endColumn":118},{"ruleId":"74","severity":1,"message":"85","line":243,"column":72,"nodeType":"76","messageId":"86","endLine":243,"endColumn":74},{"ruleId":"87","severity":1,"message":"88","line":255,"column":103,"nodeType":"89","endLine":255,"endColumn":118},{"ruleId":"74","severity":1,"message":"85","line":285,"column":72,"nodeType":"76","messageId":"86","endLine":285,"endColumn":74},{"ruleId":"87","severity":1,"message":"88","line":297,"column":103,"nodeType":"89","endLine":297,"endColumn":118},{"ruleId":"70","severity":1,"message":"90","line":13,"column":35,"nodeType":"72","messageId":"73","endLine":13,"endColumn":40},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'ModalHeader' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'counterFunction'. Either include it or remove the dependency array.","ArrayExpression",["93"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has missing dependencies: 'fetchPredictions' and 'history'. Either include them or remove the dependency array.",["94"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},"Update the dependencies array to be: [counterFunction, predictions]",{"range":"99","text":"100"},"Update the dependencies array to be: [fetchPredictions, history]",{"range":"101","text":"102"},[2896,2909],"[counterFunction, predictions]",[3104,3106],"[fetchPredictions, history]"]